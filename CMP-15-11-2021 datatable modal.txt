<aura:component controller="CalenderClass" implements="force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId,lightning:availableForFlowScreens" access="global">
    
    <aura:attribute name="callPlannerList" type="object"/>
    <aura:attribute name="mycolumns" type="List"/>
    <aura:attribute name="sortedBy" type="String" default="Name"/>
    <aura:attribute name="sortedDirection" type="String" default="asc"/>
    <aura:attribute name="openModal" type="boolean" default="false"/>
     <aura:attribute name="selectesRec" type="Call_Plan_Data__c"/>
    <aura:attribute name="evtSubject" type="String"/>
    <aura:attribute name="evtStart" type="DateTime"/>
    <aura:attribute name="evtend" type="DateTime"/>
    <aura:attribute name="evtType" type="String"/>
   <!-- <aura:attribute name="Country" type="String"/>-->
    <aura:attribute name="eventRec" type="Event"/>
    <aura:attribute name="fieldMap" type="Map"/>
   <!-- <aura:attribute name="fieldMap1" type="Map"/>-->
    <aura:handler name="init" value="{!this}" action="{!c.doInit}"/>
    
    <!--Markup start-->
    <div class="slds-card">
        <div class="slds-card__header slds-grid">
           <header class="slds-media slds-media_center slds-has-flexi-truncate">
                <div class="slds-media__figure">
                    <lightning:Icon iconName="standard:account"  size="small" class="slds-icon slds-input__icon slds-input__icon_right " />
                </div>
                <div class="slds-media__body">
                    <h2>
                        <a href="javascript:void(0);" class="slds-card__header-link slds-truncate" title="Account List">
                            <span class="slds-text-heading_small">Call Planner List</span>
                        </a>
                    </h2>
                </div>
            </header>           
        </div>
        <div class="slds-card__body slds-card__body_inner">
            <div style="height:250px;">
                <lightning:datatable data="{!v.callPlannerList}" columns="{!v.mycolumns}" 
                                     keyField="id" hideCheckboxColumn="true"
                                     onsort="{!c.updateColumnSorting}"
                                     sortedBy="{!v.sortedBy}" sortedDirection="{!v.sortedDirection}"
                                     onrowaction="{! c.handleRowAction }" showRowNumberColumn="true"/>
            </div>
        </div>
        <footer class="slds-card__footer"></footer>
    </div>
    
    <aura:if isTrue="{!v.openModal}">
        <div class="slds-m-around_xx-large">
            <!--Use aura:if tag to display/hide popup based on isModalOpen value-->                         
            <!-- Modal/Popup Box starts here-->
            <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open slds-modal_small">
                <div class="slds-modal__container">
                    <!--loading spinner start-->
                    <div class="slds-is-relative">
                        <aura:if isTrue="{!v.spinner}">
                            <div aura:id="spinnerId" class="slds-spinner_container">
                                <div class="slds-spinner--brand  slds-spinner slds-spinner--medium slds-is-relative" role="alert">
                                    <span class="slds-assistive-text">Loading</span>
                                    <div class="slds-spinner__dot-a"></div>
                                    <div class="slds-spinner__dot-b"></div>
                                </div>
                            </div>
                        </aura:if>
                        
                        <!--Loading spinner end--> 
                        <header class="slds-modal__header">
                            <lightning:buttonIcon iconName="utility:close"
                                                  onclick="{! c.closeModal }"
                                                  alternativeText="close"
                                                  variant="bare-inverse"
                                                  class="slds-modal__close"/>
                            <h2 id="modal-heading-01" class="slds-text-heading_small slds-hyphenate">New Event</h2>
                        </header>
                        <div class="slds-modal__content slds-p-around_small slds-wrap"  id="modal-content-id-1">
                            <!--Subject-->
                            <lightning:input aura:id="evtSubject" name="evtSubject" label="Subject" value="{!v.evtSubject}" required="true" class="slds-size--1-of-2 slds-p-horizontal_x-small" />
                            
                            <!--Assigned to-->
                            
                            
                            <!--Start Datetime-->
                            <lightning:input aura:id="evtStart" type="Datetime" name="evtStart" label="Start" value="{!v.evtStart}" year="2-digit" month="short" day="2-digit" hour="numeric"
                                             weekday="long" minute="2-digit" class="slds-size--1-of-2 slds-p-horizontal_x-small" />
                            
                            <!--End Datetime-->
                            <lightning:input aura:id="evtEnd" type="Datetime" name="evtEnd" label="End" value="{!v.evtend}" year="2-digit" month="short" day="2-digit" hour="numeric"
                                             weekday="long" minute="2-digit" class="slds-size--1-of-2 slds-p-horizontal_x-small" />
                            
                            <div class="slds-grid slds-gutters slds-p-top_x-small slds-p-bottom_x-small">
                                <div class="slds-col slds-size_6-of-12">
                                    <span>
                                        <div class="slds-form-element__label">Account Name</div>
                                        <div class="slds-box slds-box_xx-small" style="{!v.selectesRec.Account_Name__c}">
                                            <aura:if isTrue="{!v.selectesRec.Account_Name__c}">
                                                <lightning:icon iconName="standard:account" size="small"></lightning:icon> &nbsp;&nbsp;
                                                {!v.selectesRec.Account_Name__c}
                                            </aura:if>
                                        </div>
                                    </span>
                                </div>
                                <div class="slds-col slds-size_6-of-12">
                                    <span>
                                        <div class="slds-form-element__label">Contact Name</div>
                                        <div class="slds-box slds-box_xx-small" style="{!v.selectesRec.Contact_Name__c}">
                                            <aura:if isTrue="{!v.selectesRec.Contact_Name__c}">
                                                <lightning:icon iconName="standard:account" size="small"></lightning:icon> &nbsp;&nbsp;
                                                {!v.selectesRec.Contact_Name__c}
                                            </aura:if>
                                        </div>
                                    </span>
                                </div>
                            </div>
                             <!-- Picklist Country type-->
                            
                            <!-- Picklist Country type-->
                            
                            <!-- Picklist Event type-->
                            <div class="form-group">
                                <lightning:select aura:id="industryPicklist" value="{!v.evtType}" onchange="{!c.handleOnChange}" name="industryPicklist" label="Event Type" required="true" class="slds-size--1-of-2 slds-p-horizontal_x-small">
                                    <option value="">--None--</option>
                                    <aura:iteration items="{!v.fieldMap}" var="i" indexVar="key">
                                        <option text="{!i.value}" value="{!i.key}" selected="{!i.key==v.evtType}" />
                                    </aura:iteration>
                                </lightning:select>
                            </div>
                            <!-- Picklist Event type-->
                        </div>
                        <footer class="slds-modal__footer">
                            <lightning:button iconName="utility:undo"
                                              iconPosition="right"
                                              variant="neutral" 
                                              label="Cancel Flow"
                                              title="Cancel Flow"
                                              onclick="{! c.closeModal }"/>
                            
                            <lightning:button iconName="utility:send"
                                              variant="brand" 
                                              label="Done"
                                              title="Done"
                                              onclick="{!c.saveRecord }"/>
                        </footer>
                    </div>
                </div>
            </section>
            <div class="slds-backdrop slds-backdrop_open"></div>
        </div>
    </aura:if>
    
    <!--End Modal code-->
    <!--Markup ends-->
    
    
</aura:component>
**************************************
JS---->
({
    saveRecord: function (cmp, event, helper) {
        cmp.set("v.openModal",false);
        //alert(cmp.get("v.evtSubject"));
        //alert(cmp.get("v.evtStart"));
        //alert(cmp.get("v.evtend"));
        //alert(cmp.get("v.evtType"));
         //alert(cmp.get("v.evtType"));
         //alert(cmp.get("v.Country"));
         var action = cmp.get("c.insertEvt");
        action.setParams({
            callPlanRec : JSON.stringify(cmp.get("v.selectesRec")),
            eventsub : cmp.get("v.evtSubject"),
             strtdate : cmp.get("v.evtStart"),
             enddate : cmp.get("v.evtend"),
            eventtype : cmp.get("v.evtType")
             //Country : cmp.get("v.Country"),
        });
        action.setCallback(this,function(response){
            var state = response.getState();
            if(state === "SUCCESS"){
               var toastEvent = $A.get("e.force:showToast");
        toastEvent.setParams({
            title : 'Success',
            message: 'Event record has been created successfully.',
            duration:' 5000',
            key: 'info_alt',
            type: 'success',
            mode: 'pester'
        });
        toastEvent.fire();
            }
            else if(state === "ERROR"){
                var errors = action.getError();
                if (errors) {
                    if (errors[0] && errors[0].message) {
                        alert(errors[0].message);
                    }
                }
            }
        });       
        $A.enqueueAction(action);
    },
            
    updateColumnSorting: function (cmp, event, helper) {
        var fieldName = event.getParam('fieldName');
        var sortDirection = event.getParam('sortDirection');
        cmp.set("v.sortedBy", fieldName);
        cmp.set("v.sortedDirection", sortDirection);
        helper.sortData(cmp, fieldName, sortDirection);
    },
    handleRowAction :function(cmp,event,helper){
            //action gives which action performed
            var action = event.getParam('action');
            //row gives complete row information
            var row = event.getParam('row');
            cmp.set('v.selectesRec',row);
            console.log('*****row:'+JSON.stringify(row));
            console.log(JSON.stringify(action));
            
            console.log('You have selected View Action for '+row.Name+'(id='+row.Id+')');
            
            cmp.set("v.openModal",true);
            
    },
    closeModal :function(cmp,event,helper){
            cmp.set("v.openModal",false);
   },
   
    doInit : function(component, event, helper) {
        helper.getPicklistValues(component, event);
       // helper.getPicklistValues(component, event);
        component.set('v.mycolumns', [
            {label:'Action',type:  'button',typeAttributes:
             {iconName: 'utility:view',label: 'View Record',name: 'viewRecord', disabled: false,value: 'viewBtn',variant:'brand'}
            },
            {label: 'Account Name', fieldName: 'Account_Name__c', type: 'text', sortable: true},
            {label: 'Contact Name', fieldName: 'Contact_Name__c', type: 'text',sortable: true},
            {label: 'IOL sales', fieldName: 'IOL_sales__c', type: 'Number',sortable: true},
            {label: 'Predicted Account fulfillment', fieldName: 'Predicted_Account_fulfillment__c', type: 'Number',sortable: true},
            {label: 'Cataract Segment', fieldName: 'Cataract_Segment__c', type: 'Picklist',sortable: true},
            {label: 'Main Doctor', fieldName: 'Main_Doctor__c', type: 'Checkbox',sortable: true},
            {label: 'SAP Account Number', fieldName: 'SAP_Account_Number__c', type: 'Number',sortable: true},
            {label: 'Rank', fieldName: 'Rank__c', type: 'Number',sortable: true},
        ]);
        
        helper.callToServer(
            component,
            "c.getCallPlannerRec",
            function(response){	
                console.log('apex response :'+JSON.stringify(response));
                component.set("v.callPlannerList",response);
            }
        );
        
    },
            //handle Event type Picklist Selection
    handleOnChange : function(component, event, helper) {
        var EventType = component.get("v.evtType");
       // alert(EventType);
    },
                  //handle Country Picklist Selection
   /*handleOnChangeCountry : function(component, event, helper) {
        var Country = component.get("v.Country");
        alert(Country);
    },*/
})
**********************************
Helper---->
({
    callToServer : function(component, method, callback) {
    console.log('Calling helper callToServer function to get data');
		var action = component.get(method);
        /*if(params){
            action.setParams(params);
        }
        console.log('****param to controller:'+JSON.stringify(params));*/
        action.setCallback(this, function(response) {
            var state = response.getState();
            if (state === "SUCCESS") {
                callback.call(this,response.getReturnValue());
            }else if(state === "ERROR"){
                var errors = response.getError();
                console.error(errors);
				alert('Problem with connection. Please try after sometime or contact your system administrator.');
            }
        });
		$A.enqueueAction(action);
    },
    sortData: function (cmp, fieldName, sortDirection) {
        var data = cmp.get("v.acctList");
        var reverse = sortDirection !== 'asc';
        data.sort(this.sortBy(fieldName, reverse))
        cmp.set("v.acctList", data);
    }, 
    getPicklistValues: function(component, event) {
        var action = component.get("c.getEventtypeFieldValue");
        // var action = component.get("c.getCountryFieldValue");
        action.setCallback(this, function(response) {
            var state = response.getState();
            if (state === "SUCCESS") {
                var result = response.getReturnValue();
                var fieldMap = [];
                for(var key in result){
                    fieldMap.push({key: key, value: result[key]});
                }
                component.set("v.fieldMap", fieldMap);
              //  component.set("v.fieldMap1", fieldMap);
            }
        });
        $A.enqueueAction(action);
    },
    /*sortBy: function (field, reverse, primer) {
        var key = primer ?
            function(x) {return primer(x[field])} :
            function(x) {return x[field]};
        reverse = !reverse ? 1 : -1;
        return function (a, b) {
            return a = key(a), b = key(b), reverse * ((a > b) - (b > a));
        }
    }*/
})
*******************************************

Apex-->

/*
 * Class Name: CalenderClass
 * Created Date : 11/11/2021
 * Description: This class used in Custom_Calendar_CMP,DataTable_Call_Planning,DataTable_Call component.
 * Copyright (c) 2018 Johnson & Johnson
 */

public class CalenderClass {
    /*Calender Code Start*/
    @AuraEnabled
    public static list<Event> getAllEvents(){
        list<Event> eventlist =[Select id, EndDateTime,StartDateTime,Subject from Event where createdById=:Userinfo.getUserId()] ;
        return eventlist;
    }
    @AuraEnabled
    public static void updateEvent(string eventid,string eventdate){
        system.debug(eventid);
        system.debug(eventdate);
        string eventdatelist = eventdate.replace('T',' ');
        
        system.debug(eventdatelist);
        Event e= new event(id = eventid);
        e.StartDateTime = DateTime.valueof(eventdatelist);
        update e;
    }
    /*Calender Code end*/
    
   
    /*DataTable code Start*/
    @AuraEnabled
    public static List<Call_Plan_Data__c> getCallPlannerRec() {                
        return [SELECT Account_Name__c,AccountId__c,Cataract_Segment__c,Contact_Name__c,Event_Count__c,IOL_sales__c,JNJ_IOL_share__c,Main_Doctor__c,Medicare_Procedure__c,Predicted_Account_fulfillment__c,Rank__c,SAP_Account_Number__c,Territory_Manager__c FROM Call_Plan_Data__c WHERE Main_Doctor__c = true ORDER BY Rank__c ASC NULLS FIRST];
    }
    /*DataTable code End*/
    
    /*Picklist Event Type Code Start*/
    @AuraEnabled 
    public static Map<String, String> getEventtypeFieldValue(){
        Map<String, String> options = new Map<String, String>();
        Schema.DescribeFieldResult fieldResult = event.Event_Type__c.getDescribe();
        List<Schema.PicklistEntry> pValues = fieldResult.getPicklistValues();
        for (Schema.PicklistEntry p: pValues) {
            
            options.put(p.getValue(), p.getLabel());
        }
        return options;
    }
    /*Picklist Event Type Code END*/
    
    /*Picklist Country Code Start*/
  /* @AuraEnabled 
    public static Map<String, String> getCountryFieldValue(){
        Map<String, String> options = new Map<String, String>();
        Schema.DescribeFieldResult fieldResult = event.Country__c.getDescribe();
        List<Schema.PicklistEntry> pValues = fieldResult.getPicklistValues();
        for (Schema.PicklistEntry p: pValues) {
            
            options.put(p.getValue(), p.getLabel());
        }
        return options;
    }*/
    /*Picklist Country Code END*/
    
    
    /*Event Insert Code Start*/
    @AuraEnabled
    public static event insertEvt(string callPlanRec,string eventsub, datetime strtdate, datetime enddate,String eventtype) {  
       Id recordTypeId = Schema.SObjectType.Event.getRecordTypeInfosByDeveloperName().get('JAPN_Cataract').getRecordTypeId();
        Call_Plan_Data__c rec = (Call_Plan_Data__c)System.JSON.deserialize(callPlanRec, Call_Plan_Data__c.class);

        Event eventRec =  NEw Event();
        eventRec.WhatId = rec.AccountId__c;
        eventRec.Subject = eventsub;
        eventRec.StartDateTime =strtdate;
        eventRec.EndDateTime =enddate;
        eventRec.Event_Type__c = eventtype;
        eventRec.region__c ='JAPN';
        eventRec.RecordtypeId= recordTypeId;
        insert eventRec;
        
        return eventRec;
    }
    /*Event Insert Code End*/
}
***********************************************************
