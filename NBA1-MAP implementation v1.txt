AccountsSelector_CA--------->

/**
* @author : Urvashi Barapatre | APJ Call Automation FOR JAPAN
* @description Account selector class
* @date 23-11-2021
* Copyright (c) $2021 Johnson & Johnson
*/
public with sharing class AccountsSelector_CA  extends fflib_SObjectSelector{
    
    public static AccountsSelector_CA newInstance()
    {
        return (AccountsSelector_CA) Application_CA.Selector.newInstance(Account.SObjectType);
    }
    
    public SObjectType getSObjectType()
    {
        return Account.SObjectType;
    }
    
    public List<Schema.SObjectField> getSObjectFieldList()
    {
        return new List<Schema.SObjectField>
        {
            Account.Region__c,
                Account.Id,
                Account.LastActivityDate,
                Account.LastModifiedDate,
                Account.Name,
                Account.Record_Type_Name__c,
                Account.Status__c,
                Account.Refractive_Implant_Specialist__c,
                Account.Territory_Manager__c,
                Account.Medicare_Procedure__c,
                Account.CA_Event_NBA_Rejection_Date2__c,
                Account.CA_Snooz_Recommendation_NBA1__c
                };
                    }
    /**
* getAccountsWithAssetsOpptysByVcodes
* @description Method to get Accounts with Assets and Opptys by Vcodes on Home page
* @param set of vcodes, RegionFilter, RecordTypeName,AccStatus,AssetStatus,ProductFamily,Assetage
* @return Returns a list of Accounts 
*/
    public List<Account> getAccountsWithAssetsOpptysByVcodes(Set<String> vcodes, String RegionFilter,String RecordTypeName, List<String> AccStatus, String AssetStatus, String ProductFamily, Decimal Assetage)
    {
        fflib_QueryFactory aQF = newQueryFactory().setCondition('(Territory_Manager__c LIKE :vcodes OR Refractive_Implant_Specialist__c LIKE :vcodes) AND Region__c = :RegionFilter AND Record_Type_Name__c = :RecordTypeName AND Status__c IN : AccStatus');
        new AssetsSelector_CA().addQueryFactorySubselect(aQF, 'Assets').setCondition('Asset_Age_Calculator__c >=: Assetage AND Acc_Region__c = :RegionFilter AND Status = :AssetStatus AND ProductFamily = :ProductFamily').setLimit(1);
        return (List<Account>) Database.query(aQF.toSOQL());
    }
    public override String getOrderBy(){
        return 'Medicare_Procedure__c DESC NULLS LAST';
    }
    
    /**
* getAccountsWithEvtsOppty
* @description Method to get Accounts with Events to create an opportunities on Home page
* @param set of vcodes, RegionFilter, RecordTypeName,AccStatus,EAFlag,Evtregion,VisitResultFilter,isclosed
* @return Returns a list of Accounts 
*/
    public List<Account> getAccountsWithEvtsOpptyByVcodes(Set<String> vcodes,String RegionFilter, String RecordTypeName, List<String> AccStatus, Boolean EAFlag,String Evtregion,String VisitResultFilter)
    {
        fflib_QueryFactory aQF = newQueryFactory().setCondition('(Territory_Manager__c LIKE :vcodes OR Refractive_Implant_Specialist__c LIKE :vcodes) AND Region__c = :RegionFilter AND Record_Type_Name__c = :RecordTypeName AND Status__c IN : AccStatus');
        new EventsSelector_CA().addQueryFactorySubselect(aQF, 'Events').setCondition('Einstein_NBA_Flag__c = :EAFlag AND StartDateTime <= LAST_N_DAYS:365 AND VisitResult__c != :VisitResultFilter AND region__c = :Evtregion ').setLimit(1);
        return (List<Account>) Database.query(aQF.toSOQL());
    }
    
}
****************************************
AssetsSelector_CA--------->
/**
* @author : Urvashi Barapatre | APJ Call Automation FOR JAPAN
* @description Asset selector class
* @date 23-11-2021
* Copyright (c) $2021 Johnson & Johnson
*/
public with sharing class AssetsSelector_CA extends fflib_SObjectSelector
{
    public Schema.SObjectType getSObjectType()
    {
        return Asset.SObjectType;
    }
    
    public List<Schema.SObjectField> getSObjectFieldList()
    {
        return new List<Schema.SObjectField>
        {
            Asset.Id,
                Asset.Name,
                Asset.Asset_Age_Calculator__c,
                Asset.Acc_Region__c,
                Asset.Status,
                Asset.ProductFamily,
                Asset.AccountId,
                Asset.RecordType.Name,
                Asset.InstallDate 
                
                };
                    }
    public override String getOrderBy(){
        return 'RecordType.Name ASC NULLS LAST,InstallDate ASC NULLS LAST';
    }
}
********************************************

OpportunitiesSelector_CA------------------>
/**
* @author : Urvashi Barapatre | APJ Call Automation FOR JAPAN
* @description Opportunity selector class
* @date 24-01-2022
* Copyright (c) $2022 Johnson & Johnson
*/
public with sharing class OpportunitiesSelector_CA extends fflib_SObjectSelector{
    public Schema.SObjectType getSObjectType()
    {
        return Opportunity.SObjectType;
    }
    
    public List<Schema.SObjectField> getSObjectFieldList()
    {
        return new List<Schema.SObjectField>
        {
            Opportunity.AccountId,
                Opportunity.CloseDate,
                Opportunity.Id,
                Opportunity.LastActivityDate,
                Opportunity.LastModifiedDate,
                Opportunity.Name,
                Opportunity.StageName,
                Opportunity.CreatedDate ,
                Opportunity.Account_Region__c,
                Opportunity.RecordType.Name	
                };
                    }
    /**
* getOpptyWithOpptyLineItem
* @description Method to get Opportunity with ProductFamily from ProductFamily
* @param set of RegionFilter, ProductFamily,RecordTypeName,isOpenOppty
* @return Returns a list of Opportunity 
*/
    public List<Opportunity> getOpptyWithOpptyLineItem(String RegionFilter,String ProductFamily,String RecordTypeName,boolean isOpenOppty)
    {
        fflib_QueryFactory aQF = newQueryFactory().setCondition('Account_Region__c = :RegionFilter AND RecordType.Name = :RecordTypeName  AND IsClosed =: isOpenOppty AND (NOT(CreatedDate = LAST_N_DAYS:365))');
        new OpportunityLineItemSelector_CA().addQueryFactorySubselect(aQF, 'OpportunityLineItems').setCondition('Product_Family__c =:ProductFamily').setLimit(1);
        return (List<Opportunity>) Database.query(aQF.toSOQL());
    }
    
    /**
* getClosedOpptyWithOpptyLineItem
* @description Method to get Opportunity with ProductFamily from ProductFamily
* @param set of vcodes, RegionFilter, ProductFamily
* @return Returns a list of Opportunity
*/
    public List<Opportunity> getClosedOpptyWithOpptyLineItem(String RegionFilter,String ProductFamily,boolean isclosed,String RecordTypeName)
    {
        fflib_QueryFactory aQF = newQueryFactory().setCondition('Account_Region__c = :RegionFilter AND IsClosed = :isclosed AND RecordType.Name = :RecordTypeName');
        new OpportunityLineItemSelector_CA().addQueryFactorySubselect(aQF, 'OpportunityLineItems').setCondition('Product_Family__c =:ProductFamily').setLimit(1);
        return (List<Opportunity>) Database.query(aQF.toSOQL());
    }
}
************************************************************

OpportunityLineItemSelector_CA------------------>

/**
* @author : Urvashi Barapatre | APJ Call Automation FOR JAPAN
* @description OpportunityLineItem selector class
* @date 24-01-2022
* Copyright (c) $2022 Johnson & Johnson
*/
public with sharing class OpportunityLineItemSelector_CA extends fflib_SObjectSelector{
    public Schema.SObjectType getSObjectType()
    {
        return OpportunityLineItem.SObjectType;
    }
    
    public List<Schema.SObjectField> getSObjectFieldList()
    {
        return new List<Schema.SObjectField>
        {
            OpportunityLineItem.OpportunityId,
                OpportunityLineItem.Product_Family__c,
                OpportunityLineItem.Id
                };
                    }
    
}
*************************************************
RecommendationSettingSelector_CA------------->
/**
 * @author : Urvashi Barapatre | APJ Call Automation FOR JAPAN
 * File Name: RecommendationSettingSelector_CA  
 * Description: Selector class for Recommendation_Setting__mdt
 * @date 23-11-2021
 * Copyright (c) 2021 Johnson & Johnson
 */
public with sharing class RecommendationSettingSelector_CA extends fflib_SObjectSelector
{
    /**
     * Create New Instance
     */
    public static RecommendationSettingSelector_CA newInstance()
    {
        return (RecommendationSettingSelector_CA) Application_CA.Selector.newInstance(Recommendation_Setting__mdt.SObjectType);
    }

    public Schema.SObjectType getSObjectType()
    {
        return Recommendation_Setting__mdt.sObjectType;
    }

    /**
     * getSObjectFieldList
     * @description Holds a list of fields to be returned by all selector methods
     * @return Returns list of default Recommendation fields
     */
    public List<Schema.SObjectField> getSObjectFieldList()
    {
        return new List<Schema.SObjectField>
        {
                Recommendation_Setting__mdt.Account_Status__c,
                Recommendation_Setting__mdt.Advance_Preparation__c,
                Recommendation_Setting__mdt.DeveloperName,
                Recommendation_Setting__mdt.Asset_Age_Calculator__c,
                Recommendation_Setting__mdt.Asset_Status__c,
                Recommendation_Setting__mdt.Einstein_NBA_Flag__c,
                Recommendation_Setting__mdt.ProductFamily__c,
                Recommendation_Setting__mdt.Id,
                Recommendation_Setting__mdt.Record_Type_Name__c,
                Recommendation_Setting__mdt.Region_Filter__c,
                Recommendation_Setting__mdt.Event_Region__c,
                Recommendation_Setting__mdt.Invalid_Vcode__c,
                Recommendation_Setting__mdt.Asset_Record_Type__c,
                Recommendation_Setting__mdt.Oppty_RecordTypeName__c,
                Recommendation_Setting__mdt.Visit_Result__c,
                Recommendation_Setting__mdt.Close_Days_2__c,
                Recommendation_Setting__mdt.Closed_Oppty__c,
                Recommendation_Setting__mdt.Open_Oppty__c
        };
    }

    /**
     * selectByComponetName
     * @description Used to query Recommendation setting custom metadata
     * @return Returns Recommendation setting custom metadata
    */
    public List<Recommendation_Setting__mdt> selectByName(String recommendationSettingName)
    {
        return (List<Recommendation_Setting__mdt>)
                Database.query(
                        newQueryFactory().
                                setCondition('DeveloperName = :recommendationSettingName').
                                toSOQL());
    }

}
*********************************
Recommendation_PhacoHomeEventWithoutOpp--------------->
/*
* @author:  Urvashi Barapatre | APJ Call Automation FOR JAPAN
*
* @date: 24/01/2022
*
* @description:  Recommendation Generator class for Event on Eyeforce Home page
*/
global class Recommendation_PhacoHomeEventWithoutOpp{
    @InvocableMethod(
        label='CA Recommendation Generator Home Event without Oppty'
        description='This function returns recommendations .')
    /*
* @author:     Urvashi Barapatre | APJ Call Automation FOR JAPAN
*
* @date:        24/01/2022
*
* @description:     Generating Recommendations for Create Event for Home page 
*
* @param inputRequests: list of recommendations for Eyeforce Home page whose asset age > 7 (Without Oppty)
*
* @return:     list of recommendations
*/
    global static List<List<Recommendation>> getRecs(List<RecommendationGenerateRequest> inputRequests)
    {
        List<List<Recommendation>> outputs = new List<List<Recommendation>>();
        Set<Id> userIds = new Set<Id>();
        List<Recommendation_Setting__mdt> rs = RecommendationSettingSelector_CA.newInstance().selectByName(RecommendationUtils_CA.JAPAN_NBA_NAME);
        for (RecommendationGenerateRequest inputRequest : inputRequests)
        {
            userIds.add(inputRequest.userId);
        }
        system.debug('userIds  '+ userIds);
        List<User> users = new List<User>(UsersSelector_CA.newInstance().selectById(userIds));
        Set<String> vcodes = RecommendationUtils_CA.getVcodes(users);
        if(!vcodes.IsEmpty())
        {
            List<Account> accs = AccountsSelector_CA.newInstance().getAccountsWithAssetsOpptysByVcodes(vcodes,rs[0].Region_Filter__c,rs[0].Record_Type_Name__c,new List<String>(rs[0].Account_Status__c.split(',')),rs[0].Asset_Status__c,rs[0].ProductFamily__c,rs[0].Asset_Age_Calculator__c);
            outputs = RecommendationUtils_CA.getEventCreateRecommendations(accs, users, rs[0]);
        }
        return outputs;
    }
    /*
* @author: Urvashi Barapatre | APJ Call Automation FOR JAPAN
*
* @date:     24/01/2022
*
* @description  Recommendation generator request class for user Accounts on Eyeforce Home Page
*/
    global class RecommendationGenerateRequest
    {
        @InvocableVariable(label='User ID')
        public String userId;
    }
}
****************************
RecommendationUtils_CA-------------->

/**
* @author : Urvashi Barapatre | APJ Call Automation FOR JAPAN
* @description: Util class for Recommendation NBA
* @date 23-11-2021
* Copyright (c) $2021 Johnson & Johnson
*/
public class RecommendationUtils_CA
{
    public static final String JAPAN_NBA_NAME = System.Label.Recommendation_Setting_Record_Name;
    /**
* @param users: List of users
* @description gets vcode of users
* @return set of vcodes
*/
    public static Set<String> getVcodes(List<User> users)
    {
        Set<String> vcodes = new Set<String>();
        for (User usr : users)
        {
            if (!String.isBlank(usr.User_VCode__c))
            {
                vcodes.add(usr.User_VCode__c + '%');
            }
        }
        return vcodes;
    }
    
    /**
* @param accs: List of Accounts, users: List of users, rs: Recommendation_Setting__mdt
* @description gets recommendations for expired assets NBA based on eligible accounts on Home Page
* @return List of recommendations list
*/
    public static List<List<Recommendation>> getEventCreateRecommendations(List<Account> accs, List<User> users, Recommendation_Setting__mdt rs)
    {
        List<List<Recommendation>> outputs = new List<List<Recommendation>>();
        for (User u : users)
        {
            String uv = u.User_VCode__c;
            List<Account> eligibleAccounts = getEligibleAccounts(accs, uv, rs);
            List<Recommendation> recs = getHomePageEventCreateRecommendations(eligibleAccounts, rs);
            outputs.add(recs);
        }
        return outputs;
    }
    
    /**
* @param accounts: List of Accounts, recSetting: Recommendation_Setting__mdt
* @description gets recommendations for expired assets NBA on Home Page 
* @return List of Recommendations
*/
    public static List<Recommendation> getHomePageEventCreateRecommendations(List<Account> accounts, Recommendation_Setting__mdt recSetting)
    {
        //get Opportunity list from OpportunitiesSelector_CA
        OpportunitiesSelector_CA OppList =new OpportunitiesSelector_CA();
        List<Opportunity> oplist =OppList.getOpptyWithOpptyLineItem(recSetting.Region_Filter__c,recSetting.ProductFamily__c,recSetting.Oppty_RecordTypeName__c,recSetting.Open_Oppty__c);
        System.debug('getHomePageEventCreateRecommendations oplist  '+oplist);
        
        //Map the Opportunities with Account
        //Integer noOfDays = (Date.valueOf(opp.CreatedDate).daysBetween(Date.today()));
        Map<Id,List<Opportunity>> MapOpp =new Map<Id,List<Opportunity>>();
        for(Opportunity Opp:oplist){
            if(MapOpp.containsKey(Opp.AccountId)){
                MapOpp.get(Opp.AccountId).add(Opp);
                System.debug('Map Opp'+MapOpp);
            }else{
                MapOpp.put(Opp.AccountId,new List<Opportunity>{Opp});
            }
        }
        
        List<Recommendation> recs = new List<Recommendation>();
        for (Account currentAccount : accounts)
        {
            list<Opportunity> OP1 =new list<Opportunity>();
            if(MapOpp.containsKey(currentAccount.Id)){
                OP1 =MapOpp.get(currentAccount.Id);
                System.debug('Op Test'+OP1);
            }
            if(currentAccount.Assets.size()>0 && OP1.size()>0){
                if(currentAccount.CA_Snooz_Recommendation_NBA1__c ==true || currentAccount.CA_Event_NBA_Rejection_Date2__c==null){
                    for (Asset ass : currentAccount.Assets)
                    {
                        String recDesc = System.Label.CA_Asset + ' ' + currentAccount.Name + ' ' +currentAccount.Medicare_Procedure__c+ ' ' + System.Label.CA_AssetExpire2 +' ' + ass.Asset_Age_Calculator__c +' ' + System.Label.CA_AssetExpire3 ;
                        //recs.addall(generateEventRecommendations(currentAccount, recDesc));
                        String Name = ass.Name;
                        String Description = recDesc;
                        String ActionReference = System.Label.Event_Flow_Action_Reference;
                        String AcceptanceLabel = System.Label.Create_Event_Acceptance_Label;
                        String RejectionLabel = System.Label.Create_Event_RejectionLabel_Label;
                        String recId = currentAccount.Id;
                        String eventWhatId = currentAccount.Id;
                        String contextobj = System.Label.ContextObject_Account;
                        Recommendation rec = generateRecommendation(Description, Name, ActionReference, recId, AcceptanceLabel,RejectionLabel, eventWhatId,contextobj);
                        recs.add(rec);
                    }
                }
            }
        }
        return recs;
    }
    
    /**
* @param accs: List of Accounts, users: List of users, rs: Recommendation_Setting__mdt
* @description gets recommendations for Opportunities based on eligible accounts on Home Page
* @return List of recommendations list
*/
    public static List<List<Recommendation>> getOpptyCreateRecommendations(List<Account> accs, List<User> users, Recommendation_Setting__mdt rs)
    {
        List<List<Recommendation>> outputs = new List<List<Recommendation>>();
        for (User u : users)
        {
            String uv = u.User_VCode__c;
            List<Account> eligibleAccounts = getEligibleAccounts(accs, uv, rs);
            List<Recommendation> recs = getHomePageOpptyCreateRecommendations(eligibleAccounts, rs);
            outputs.add(recs);
        }
        return outputs;
    }    
    
    /**
* @param accounts: List of Accounts, recSetting: Recommendation_Setting__mdt
* @description gets recommendations for Opportiunity NBA on Home Page 
* @return List of Recommendations
*/
    public static List<Recommendation> getHomePageOpptyCreateRecommendations(List<Account> accounts, Recommendation_Setting__mdt recSetting)
    {
        List<Recommendation> recs = new List<Recommendation>();
        for (Account currentAccount : accounts)
        {
            if (currentAccount != null && (!currentAccount.Events.isEmpty()))
            {
                String recDesc = System.Label.CA_Asset + ' ' + currentAccount.Name + ' ' + System.Label.CA_Oppty_Label;
                recs.addall(generateOpptyRecommendations(currentAccount,recDesc));
            }
        }
        return recs;
    }
    
    /**
* @param currentAccount: Account, recDesc
* @description  generates recommendations for Opportunity
* @return list of Recommendations */
    
    public static List<Recommendation> generateOpptyRecommendations(Account currentAccount, String recDesc)
    {
        List<Recommendation> assRecs = new List<Recommendation>();
        if (currentAccount != null && (!currentAccount.Events.isEmpty()))
        {
            for (Event ev : currentAccount.Events){
                String Name = ev.Subject;
                String Description = recDesc;
                String ActionReference = System.Label.Opportunity_Flow_Action_Reference;
                String AcceptanceLabel = System.Label.Create_Opporunity_Acceptance_Label;
                String RejectionLabel = System.Label.Oppty_Rejection_Label;
                String recId = ev.WhatId;
                String eventWhatId = ev.WhatId;
                String contextobj = System.Label.ContextObject_Account;
                Recommendation rec = generateRecommendation(Description, Name, ActionReference, recId, AcceptanceLabel,RejectionLabel, eventWhatId,contextobj);
                assRecs.add(rec);
            }
        }
        return assRecs;
    }
    
    
    /**
* @param accounts: List of Accounts, usrVcode, recSetting: Recommendation_Setting__mdt
* @description gets eligible accounts based on Account Executive and Premium Practice Specialist fields
* @return List of Accounts
*/
    public static List<Account> getEligibleAccounts(List<Account> accounts, String usrVcode, Recommendation_Setting__mdt recSetting)
    {
        List<Account> acnt = new List<Account>();
        for (Account currentAccount : accounts)
        {
            if (currentAccount != null)
            {
                String exCode = recSetting.Invalid_Vcode__c;
                String spCode = recSetting.Invalid_Vcode__c;
                if (currentAccount.Territory_Manager__c != null)
                {
                    exCode = currentAccount.Territory_Manager__c.split('-').get(0);
                }
                if (currentAccount.Refractive_Implant_Specialist__c != null)
                {
                    spCode = currentAccount.Refractive_Implant_Specialist__c.split('-').get(0);
                }
                if (usrVcode == exCode ||
                    usrVcode == spCode)
                {
                    acnt.add(currentAccount);
                }
            }
        }
        return acnt;
    }
    
    /**
* @param recDescription, recName, flowReference, idReference, acceptLabel, eventWhatId
* @description generates recommendations on Account detail Page and Home Page
* @return Recommendation
*/
    public static Recommendation generateRecommendation(String recDescription, String recName, String flowReference, String idReference, String acceptLabel,String rejectLabel, String eventWhatId,String contextObj)
    {
        if (!String.isBlank(EventwhatId))
        {
            Recommendation reco = new Recommendation(
                Name = recName,
                Description = recDescription,
                ActionReference = flowReference,
                AcceptanceLabel = acceptLabel,
                RejectionLabel = rejectLabel,
                Dummy_Id__c = idReference,
                Event_What_ID__c = EventwhatId,
                ContextObject__c = contextObj
            );
            return reco;
        }
        else
        {
            Recommendation reco = new Recommendation(
                Name = recName,
                Description = recDescription,
                ActionReference = flowReference,
                AcceptanceLabel = acceptLabel,
                RejectionLabel = rejectLabel,
                Dummy_Id__c = idReference,
                ContextObject__c = contextObj
            );
            return reco;
        }
    }
    
    
    /**
* @param accounts: List of Accounts
* @description  gets recommendations for Event NBA on Account detail Page
* @return list of Recommendations list*/
    
    public static List<List<Recommendation>> getAccountEventRecommendations(List<Account> accounts)
    {
        List<List<Recommendation>> allRecs = new List<List<Recommendation>>();
        List<Recommendation> recs = new List<Recommendation>();
        for (Account currentAccount : accounts)
        {
            if (currentAccount != null && (!currentAccount.Assets.isEmpty()))
            {
                String recDesc = System.Label.Asset_Expire_Recommendation_Description ;
                recs = (generateEventRecommendations(currentAccount,recDesc));
            }
            allRecs.add(recs);
        }
        return allRecs;
        
    }
    /**
* @param currentAccount: Account, recDesc
* @description  generates recommendations for Assets
* @return list of Recommendations 
*/
    public static List<Recommendation> generateEventRecommendations(Account currentAccount, String recDesc)
    {
        List<Recommendation> assRecs = new List<Recommendation>();
        if (currentAccount != null && (!currentAccount.Assets.isEmpty()) )
        {
            for (Asset ass : currentAccount.Assets){
                String Name = ass.Name;
                String Description = recDesc;
                String ActionReference = System.Label.Event_Flow_Action_Reference;
                String AcceptanceLabel = System.Label.Create_Event_Acceptance_Label;
                String RejectionLabel = System.Label.Create_Event_RejectionLabel_Label;
                String recId = ass.Id;
                String eventWhatId = ass.AccountId;
                String contextobj = System.Label.ContextObject_Account;
                Recommendation rec = generateRecommendation(Description, Name, ActionReference, recId, AcceptanceLabel,RejectionLabel, eventWhatId,contextobj);
                assRecs.add(rec);
            }
        }
        return assRecs;
    }
    
    
    /* 
*@param accounts: List of Accounts
* @description  gets recommendations for Event NBA on Account detail Page
* @return list of Recommendations list*/
    
    public static List<List<Recommendation>> getAccountOpptyRecommendations(List<Account> accounts)
    {
        List<List<Recommendation>> allRecs = new List<List<Recommendation>>();
        List<Recommendation> recs = new List<Recommendation>();
        for (Account currentAccount : accounts)
        {
            if (currentAccount != null && (!currentAccount.Events.isEmpty()) )
            {
                String recDesc = System.Label.Opportunity_Creation_Recommendation_Description;
                recs = (generateOpptyRecommendations(currentAccount,recDesc));
            }
            allRecs.add(recs);
        }
        return allRecs;
    }
}
***************************************************
