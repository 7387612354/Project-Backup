Negative Table--?
<aura:component controller="CA_DatableClass" implements="force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId,lightning:availableForFlowScreens" access="global">
    <aura:attribute name="callPlannerList" type="object"/>
    <aura:attribute name="mycolumns" type="List"/>
    <aura:attribute name="sortedBy" type="boolean" default="Schedule_Flag_Disable__c"/>
    <aura:attribute name="sortedDirection" type="String" default="asc"/>
    <aura:attribute name="openModal" type="boolean" default="false"/>
    <aura:attribute name="selectesRec" type="Call_Plan_Data__c"/>
    <aura:attribute name="evtSubject" type="String"/>
    <aura:attribute name="evtStart" type="DateTime"/>
    <aura:attribute name="evtend" type="DateTime"/>
    <aura:attribute name="evtType" type="String"/>
    <aura:attribute name="eventRec" type="Event"/>
    <aura:attribute name="fieldMap" type="Map"/>
    <aura:attribute name="availDTP1Val" type="string"/>
    <aura:attribute name="availDTP2Val" type="string"/>
    <aura:handler name="init" value="{!this}" action="{!c.doInit}"/>
    
    <!--Declare Other topics Attributes-->
    <aura:attribute name="GenreList" type="List" default="[]" description="Genre Picklist Values"/>
    <aura:attribute name="selectedGenreList" type="List" default="[]" description="Selected Genre Picklist Values"/>
    
    <!-- Attributes Lookup -->
    <aura:attribute name="contactId" type="Id" default=""/>
    <aura:handler name="lookupEvent" event="c:componentEvent" action="{!c.handleComponentEvent}"/>
    
    
    
    <!--Datatable Component start-->
    <div class="slds-card">
        <!--Header Start-->
        <div class="slds-card__header slds-grid">
            <header class="slds-media slds-media_center slds-has-flexi-truncate">
                <div class="slds-media__figure">
                    <lightning:Icon iconName="standard:call"  size="small" class="slds-icon slds-input__icon slds-input__icon_right " />
                </div>
                <div class="slds-media__body">
                    <h2>
                        <a href="javascript:void(0);" class="slds-card__header-link slds-truncate" title="Account List">
                            <span class="slds-text-heading_small">Call Planning for Negative Account</span>
                        </a>
                    </h2>
                </div>
            </header>           
        </div>
        <!--Header end-->
        <!--Datatable code Start-->
        <lightning:card >
            <lightning:datatable data="{!v.callPlannerList}" columns="{!v.mycolumns}" 
                                 keyField="id" hideCheckboxColumn="true"
                                 onsort="{!c.updateColumnSorting}"
                                 sortedBy="{!v.sortedBy}" sortedDirection="{!v.sortedDirection}"
                                 onrowaction="{!c.handleRowAction }" />
        </lightning:card>
        <!--Datatable code end-->
    </div>
    <!--Datatable Component end-->
    <!-- Start Modal Code-->
    
    <aura:if isTrue="{!v.openModal}">
        <!--Use aura:if tag to display/hide popup based on isModalOpen value-->                         
        <!-- Modal/Popup Box starts here-->
        
        <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open slds-modal_small">
            <div  class="slds-modal__container">
                <div class="slds-scrollable" style="scroll-behavior: auto;" >
                    <!--loading spinner start-->
                    <div class="slds-is-relative">
                        <aura:if isTrue="{!v.spinner}">
                            <div aura:id="spinnerId" class="slds-spinner_container">
                                <div class="slds-spinner--brand  slds-spinner slds-spinner--medium slds-is-relative" role="alert">
                                    <span class="slds-assistive-text">Loading</span>
                                    <div class="slds-spinner__dot-a"></div>
                                    <div class="slds-spinner__dot-b"></div>
                                </div>
                            </div>
                        </aura:if>
                        
                        <!--Loading spinner end--> 
                        
                        <!-- Code -->
                        <lightning:card>
                            
                            <div class="slds-p-around_small">
                                <header class="slds-modal__header">
                                    <!-- <lightning:buttonIcon iconName="utility:close"
                                                      onclick="{! c.closeModal }"
                                                      alternativeText="close"
                                                      variant="bare-inverse"
                                                      class="slds-modal__close"/>-->
                                    <b><h2 id="modal-heading-01" class="color">New Event</h2></b>
                                    
                                </header>
                                <div class="slds-grid slds-gutters slds-p-top_x-small slds-p-bottom_x-small">
                                    <div class="slds-col slds-size_6-of-12">
                                        <span>
                                            <!--Subject-->
                                            <lightning:input aura:id="fieldId" name="evtSubject" label="Subject"  value="{!v.evtSubject}"/>
                                        </span>
                                    </div>
                                    <div class="slds-col slds-size_6-of-12">
                                        <span>
                                            <!-- Picklist Event type-->
                                            <div class="form-group">
                                                <lightning:select aura:id="validate" value="{!v.evtType}"  onchange="{!c.handleOnChange}" name="industryPicklist" 
                                                                  label="Event Type" messageWhenValueMissing="Event Type is Mandatory" required="true">
                                                    <option value="">--None--</option>
                                                    <aura:iteration items="{!v.fieldMap}" var="i" indexVar="key">
                                                        <option text="{!i.value}" value="{!i.key}" selected="{!i.key==v.evtType}" />
                                                    </aura:iteration>
                                                </lightning:select>
                                            </div>
                                            <!-- Picklist Event type-->
                                        </span>
                                    </div>
                                </div>
                                <div class="slds-grid slds-gutters slds-p-top_x-small slds-p-bottom_x-small">
                                    <div class="slds-col slds-size_6-of-12">
                                        <span>
                                            <!--Start Datetime-->
                                            <lightning:input aura:id="validate" type="Datetime" name="evtStart" label="Start Date" value="{!v.evtStart}" 
                                                             messageWhenValueMissing="Start Date is Mandatory" required="true"/>
                                        </span>
                                    </div>
                                    <div class="slds-col slds-size_6-of-12">
                                        <span>
                                            <lightning:input aura:id="validate" type="Datetime" name="evtEnd" label="End Date" value="{!v.evtend}" 
                                                             messageWhenValueMissing="End Date is Mandatory" required="true" />
                                        </span>
                                    </div>
                                </div>
                                <div class="slds-grid slds-gutters slds-p-top_x-small slds-p-bottom_x-small">
                                    <div class="slds-col slds-size_6-of-12">
                                        <span>
                                            <div class="slds-form-element__label">Account Name</div>
                                            <div class="slds-box slds-box_xx-small" style="{!v.selectesRec.Account_Name__c}">
                                                <aura:if isTrue="{!v.selectesRec.Account_Name__c}"  >
                                                    <lightning:icon iconName="standard:account" size="small"></lightning:icon> &nbsp;&nbsp;
                                                    {!v.selectesRec.Account_Name__c}
                                                </aura:if>
                                            </div>
                                        </span>
                                    </div>
                                    <div class="slds-col slds-size_6-of-12">
                                        <span>
                                            <c:CA_ContactLookup name="accountLookup"
                                                                fieldLabel="Contact Name"
                                                                childObjectApiName="Call_Plan_Data__c"
                                                                targetFieldApiName="Doctor_Name__c"
                                                                value="{!v.contactId}"
                                                                addToRecent="true"
                                                                aura:id="validate"
                                                                messageWhenValueMissing="Contact Name is Mandatory"
                                                                required="true"
                                                                />
                                        </span>
                                    </div>
                                </div>
                                <div class="slds-grid slds-gutters slds-p-top_x-small slds-p-bottom_x-small">
                                    <div class="slds-col slds-size_6-of-12">
                                        <span>
                                            <lightning:input aura:id="fieldId" label='Dr1' value="{!v.selectesRec.Available_Doctor_P1__c}"  />
                                        </span>
                                    </div>
                                    <div class="slds-col slds-size_6-of-12">
                                        <span>
                                            <lightning:input aura:id="fieldId" label='Dr2' value="{!v.selectesRec.Available_Doctor_P2__c}"  />
                                        </span>
                                    </div>
                                </div>  
                                <div class="slds-grid slds-gutters slds-p-top_x-small slds-p-bottom_x-small">
                                    <div class="slds-col slds-size_6-of-12">
                                        <span class='Span'>
                                            <div class="slds-form-element__label">Available Datetime1</div>
                                            <div class="slds-box slds-box_xx-small" style="{!v.availDTP1Val}"  name="datetime1">
                                                <lightning:formattedRichText value="{!v.availDTP1Val}" aura:id="Date1" class="d1"/>
                                            </div>
                                        </span>
                                    </div>
                                    
                                    <div class="slds-col slds-size_6-of-12">
                                        <span>
                                            <div class="slds-form-element__label">Available Datetime2</div>
                                            <div class="slds-box slds-box_xx-small" style="{!v.availDTP2Val}">
                                                <lightning:formattedRichText value="{!v.availDTP2Val}" aura:id="Date2"/>
                                            </div>
                                        </span>
                                    </div>
                                </div> 
                                <lightning:dualListbox aura:id="selectGenre"
                                                       name="Genre"
                                                       label="Other Topics Covered"
                                                       options="{!v.GenreList }"
                                                       value="{!v.selectedGenreList}"
                                                       onchange="{!c.handleGenreChange}"/>
                                <footer class="slds-modal__footer">
                                    <lightning:button iconName="utility:undo"
                                                      iconPosition="right"
                                                      variant="destructive-text" 
                                                      label="Cancel"
                                                      title="Cancel"
                                                      onclick="{! c.closeModal }"/>
                                    
                                    <lightning:button iconName="utility:send"
                                                      variant="destructive" 
                                                      label="Done"
                                                      title="Done"
                                                      onclick="{!c.saveRecord }"/>
                                </footer>
                            </div>
                        </lightning:card>
                    </div>
                </div>
            </div>
        </section>
        <div class="slds-backdrop slds-backdrop_open"></div>
    </aura:if>
    
    <!--End Modal code-->
    <!--Markup ends-->
</aura:component>
*******************************
({
    saveRecord: function (cmp, event, helper) {
        //Custom validation
        var eventsfields = cmp.find("validate");
        var blank =0;
        if(eventsfields.length !=undefined){
            var allValid = eventsfields.reduce(function (validSoFar,inputCmp) {
                inputCmp.showHelpMessageIfInvalid();
                return validSoFar && inputCmp.get('v.validity').valid;
            }, true);
            if(!allValid){
                blank++;
            }
        }else{
            var allValid=eventsfields;
            if(!allValid.get('v.validity').valid){
                blank++;
            }
        }
        // cmp.set("v.openModal",false);
        //alert(cmp.get("v.evtSubject"));
        //
        if(blank == 0){
            var action = cmp.get("c.insertEvt");
            //Multislect picklist ; split
            var test =cmp.get("v.selectedGenreList").join('; ');
            action.setParams({
                callPlanRec : JSON.stringify(cmp.get("v.selectesRec")),
                eventsub : cmp.get("v.evtSubject"),
                strtdate : cmp.get("v.evtStart"),
                enddate : cmp.get("v.evtend"),
                eventtype : cmp.get("v.evtType"),
                topics : test,
            });
            
            action.setCallback(this,function(response){
                var state = response.getState();
                if(state === "SUCCESS"){
                    var toastEvent = $A.get("e.force:showToast");
                    toastEvent.setParams({
                        title : 'Success',
                        message: 'Event record has been created successfully.',
                        duration:' 5000',
                        key: 'info_alt',
                        type: 'success',
                        mode: 'pester'
                    });
                    $A.get('e.force:refreshView').fire(); 
                    toastEvent.fire();
                }
                else if(state === "ERROR"){
                    var errors = action.getError();
                    if (errors) {
                        if (errors[0] && errors[0].message) {
                            alert(errors[0].message);
                            // alert('Fail');
                        }
                    }
                }
            });       
            $A.enqueueAction(action);
        }
    },
    
    updateColumnSorting: function (cmp, event, helper) {
        var fieldName = event.getParam('fieldName');
        var sortDirection = event.getParam('sortDirection');
        cmp.set("v.sortedBy", fieldName);
        cmp.set("v.sortedDirection", sortDirection);
        helper.sortData(cmp, fieldName, sortDirection);
    },
    //Contact lookup mapped start
    handleComponentEvent : function(cmp, event, helper) {
        cmp.set("v.contactId", event.getParam("recordId"));
        //alert(cmp.get('v.contactId'));
        var addNewVal = cmp.get('v.selectesRec');
        addNewVal['Doctor_Name__c'] = event.getParam("recordId");  
        cmp.set('v.selectesRec',addNewVal);
    },
    
    //Contact lookup mapped end
    
    handleRowAction :function(cmp,event,helper){
        //action gives which action performed
        var action = event.getParam('action');
        //row gives complete row information
        var row = event.getParam('row');
        cmp.set('v.selectesRec',row);
        console.log('*****row:'+JSON.stringify(row));
        console.log(JSON.stringify(action));
        
        console.log('You have selected View Action for '+row.Name+'(id='+row.Id+')');
        cmp.set("v.openModal",true);
        /*Split Code*/
        if(row.Doc1_Available_Datetime__c!=null){
            var splitVal1 = row.Doc1_Available_Datetime__c.replaceAll(" ", "<br/>");
            var  splitVal01 = splitVal1.replace(/(<br\s*\/?>){2,}/gi, '<br>');
            cmp.set("v.availDTP1Val",splitVal01);       
        }
        
        /*Split Code*/ 
        if(row.Doc_2_Available_Datetime__c!=null){
            var splitVal2 = row.Doc_2_Available_Datetime__c.replaceAll(" ", "<br>");
            var  splitVal01 = splitVal1.replace(/(<br\s*\/?>){2,}/gi, '<br>');
            cmp.set("v.availDTP2Val",splitVal01);           
        }
    },
    
    closeModal :function(cmp,event,helper){
        cmp.set("v.openModal",false);
    },
    
    doInit : function(component, event, helper) {
        helper.getPicklistValues(component, event);
        helper.getTopicsValues(component, event);
        component.set('v.mycolumns', [
            {label:'Action',type:  'button',typeAttributes:
             {iconName: 'utility:view',label: 'Schedule',name: 'viewRecord', disabled :false,value: 'viewBtn',variant:{ fieldName: 'buttonColor'}},"initialWidth": 150
            },
            {label: 'Priority', fieldName: 'Priority__c', type: 'Number',sortable: true,"initialWidth": 150},
            {label: 'Account Name', fieldName: 'linkName', type: 'url', 
             typeAttributes: {label: { fieldName: 'Account_Name__c' }, target: '_blank'},"initialWidth": 150},
            {label: 'Last Call Date', fieldName: 'Last_Call_Date_Formula__c', type: 'text', sortable: true,"initialWidth": 150},
            {label: 'Completed Call of This Month', fieldName: 'Call_of_This_Month__c', type: 'Number',sortable: true,"initialWidth": 150},
            {label: 'Incoming Call of This Month', fieldName: 'Incoming_Call_of_This_Month__c', type: 'text',sortable: true,"initialWidth": 150},
            {label: 'Call Frequency', fieldName: 'Call_Frequency_Monthly__c', type: 'Number',sortable: true,"initialWidth": 150},
            {label: 'Segment', fieldName: 'Cataract_Segment__c', type: 'text',sortable: true,"initialWidth": 150},
            {label: 'Procedures', fieldName: 'Medicare_Procedure__c', type: 'Number',sortable: true,"initialWidth": 150},
            {label: 'Predicted Sales(Monthly)', fieldName: 'Predicted_IOL_Sales_Amount__c', type: 'currency',sortable: true,"initialWidth": 150},
            {label: 'Sales(Monthly)', fieldName: 'IOL_sales__c', type: 'currency',sortable: true,"initialWidth": 150},
            {label: 'JnJ Share', fieldName: 'JNJ_IOL_share__c', type: 'Number',sortable: true,"initialWidth": 150},
            {label: 'Dr1', fieldName: 'Available_Doctor_P1__c', type: 'text',sortable: true,"initialWidth": 150},
            {label: 'Available Datetime1', fieldName: 'Doc1_Available_Datetime__c', type: 'text',sortable: true,"initialWidth": 150},
            {label: 'Dr2', fieldName: 'Available_Doctor_P2__c', type: 'text',sortable: true,"initialWidth": 150},
            {label: 'Available Datetime2', fieldName: 'Doc_2_Available_Datetime__c', type: 'text',sortable: true,"initialWidth": 150},
            {label: 'Address', fieldName: 'Account_Addess__c', type: 'text',sortable: true,"initialWidth": 150},
        ]);
            helper.fetchNegativesAccounts( component );  
            },
            //handle Event type Picklist Selection
            handleOnChange : function(component, event, helper) {
            var EventType = component.get("v.evtType");
            },
            //Topics code
            handleGenreChange: function (component, event, helper) {
            //Get the Selected values   
            var selectedValues = component.get("v.selectedGenreList");
            //var stringify = JSON.parse(JSON.stringify(component.get("v.selectedGenreList")));
            //Update the Selected Values  
            component.set("v.selectedGenreList", selectedValues);
            },
            })
			*****************************
			({
    sortData: function (cmp, fieldName, sortDirection) {
        var data = cmp.get("v.callPlannerList");
        var reverse = sortDirection !== 'asc';
        data.sort(this.sortBy(fieldName, reverse))
        cmp.set("v.callPlannerList", data);
    }, 
    
    getPicklistValues: function(component, event) {
        var action = component.get("c.getEventtypeFieldValue");
        action.setCallback(this, function(response) {
            var state = response.getState();
            if (state === "SUCCESS") {
                var result = response.getReturnValue();
                var fieldMap = [];
                for(var key in result){
                    fieldMap.push({key: key, value: result[key]});
                }
                component.set("v.fieldMap", fieldMap);
            }
        });
        $A.enqueueAction(action);
    },
    
    sortBy: function (field, reverse, primer) {
        var key = primer ? function(x) {return primer(x[field])} : function(x) {return x[field]};
        //checks if the two rows should switch places
        reverse = !reverse ? 1 : -1;
        return function (a, b) {
            return a = key(a), b = key(b), reverse * ((a > b) - (b > a));
        }
    },
    
    //Button code
    fetchNegativesAccounts : function( component ) {
        var action = component.get("c.getCallPlannerNegativeRec");
        action.setParams({
        });
        action.setCallback(this, function(response) {
            var state = response.getState();
            if (state === "SUCCESS") {
                var records =response.getReturnValue();
                component.set("v.callPlannerList", response.getReturnValue());
                records.forEach(function(record){
                    //record.linkName = '/'+record.AccountId__c;
                    record['linkName'] = '/lightning/r/Account/' +record['AccountId__c'] +'/view';
                });
                 for ( var i = 0; i < records.length; i++ ) {  
                 if (records[i].Call_Target_Meet__c == 1) {
                        records[i].buttonColor = 'destructive';  
                    }
                    else  
                        records[i].buttonColor = 'destructive-text'; 
                }  
                component.set("v.callPlannerList", records);
            }
        });
        $A.enqueueAction(action);
    },
    
    //Topics code
    getTopicsValues: function(component, event, helper) {
        var action = component.get("c.getPiklistValues");
        action.setCallback(this, function(response) {
            var state = response.getState();
            if (state === "SUCCESS"){
                var result = response.getReturnValue();
                var plValues = [];
                for (var i = 0; i < result.length; i++) {
                    plValues.push({
                        label: result[i],
                        value: result[i]
                    });
                }
                component.set("v.GenreList", plValues);
            }
        });
        $A.enqueueAction(action);
    },
  
})
****************************************
CA_ContactLookup----------->
<aura:component controller="CA_DatableClass" access="global">
    
    <!-- Attributes -->
    <aura:attribute name="name" type="String" default=""/>
    <aura:attribute name="variantLabel" type="String" default="label-hidden"/>
    <aura:attribute name="fieldLabel" type="String" default=""/>
    <aura:attribute name="childObjectApiName" type="String" default=""/>
    <aura:attribute name="targetFieldApiName" type="String" default=""/>
    <aura:attribute name="value" type="String" default=""/>
    <aura:attribute name="required" type="Boolean" default="true"/>
    <aura:attribute name="addToRecent" type="Boolean" default="false"/>
    <aura:attribute name="accountDetail" type="string" default=""/>
    <aura:attribute name="messageWhenValueMissing" type="string" default="Contact Name is Mandatory"/>
    
    <!-- Register Event -->
    <aura:registerEvent name="lookupEvent" type="c:componentEvent"/>
    
    <lightning:recordEditForm objectApiName="{!v.childObjectApiName}" >
        
        <div class="slds-form-element">
            <aura:if isTrue="{!v.required}">
                <label class="slds-float_left"><abbr title="required" class="slds-required">*</abbr>{!v.fieldLabel}</label>
                <aura:set attribute="else">
                    <label class="slds-float_left">{!v.fieldLabel}</label>
                </aura:set>
            </aura:if>
             <lightning:messages aura:id="OppMessage" />
            <div class="slds-form-element__control">
                <lightning:inputField
                                      aura:id="lookupField"
                                      variant="{!v.variantLabel}"
                                      fieldName="{!v.targetFieldApiName}"
                                      value="{!v.value}"
                                      required="{!v.required}"
                                      onchange="{!c.handleChange}"
                                      />
            </div>
        </div>
        
    </lightning:recordEditForm>
    
</aura:component>
***************************************
({
    handleChange: function(component, event, helper) {
        
        let selectedValue = component.get("v.value");
        console.log(selectedValue);
        //Send the recordId to "Example Component"
        let componentEvent = component.getEvent("lookupEvent");
        componentEvent.setParams({
            "recordId" : selectedValue[0],
           
        });
        componentEvent.fire();
       
        //Add to recent list
       if(component.get("v.addToRecent") === false) {
           alert('Account Id '+component.get("v.accountDetail"));
            if(selectedValue !== undefined) {
                if (selectedValue.length > 0 && selectedValue[0].length > 0) {
                    let action = component.get("c.setObjectToRecentItems");
                    action.setParams({
                        "recordId": selectedValue[0],
                         "accountId" : component.get("v.accountDetail")
                    });
                    
                    $A.enqueueAction(action);
                }
            }
       }

        //ReportValidity
        let lookupField = component.find("lookupField");
        lookupField.reportValidity();
        

    }
    
});
********************************
.THIS .record{
    border-bottom: 1px solid #ccc;
    padding: 2px;
        cursor: pointer;
}

.THIS .records{
    border: 1px solid #ccc;
    padding: 5px;
}
.THIS .red{
    border: 1px solid red;
    padding: 5px;
}
***********************