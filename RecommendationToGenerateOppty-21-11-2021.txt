/*
* @author: Urvashi 
*
* @date:
*
* @description: Recommendation Generator class for Account record Page
*/
Global class RecommendationToGenerateOppty {
    @InvocableMethod(label='Recommendation Generator to create Opportunity'
                     description='This function returns recommendations to create Opportunity.')
    
/*
* @author: Urvashi
*
* @date: 
*
* @description: Generating Recommendations for Creating Opportunity which was product age > 7 Years.
*
* @param inputRequests: List of recommendations for accounts.
*
* @return List of Recommendations
*/
    global static List<List<Recommendation>> getRecs(List<RecommendationGenerateRequest> inputRequests)
    {
        List<List<Recommendation>> outputs = new List<List<Recommendation>>();
        set<String> setAccId = New set<String>();
        Map<Id,Account> accountMap = New Map<Id,Account>();
        for (RecommendationGenerateRequest inputRequest : inputRequests)
        {
            setAccId.add(inputRequest.accId);
        }
        for(Account accRec: [ SELECT Id,LastActivityDate,LastModifiedDate,Name,
                             (SELECT Id,Name,Asset_Age_Calculator__c,Acc_Region__c,Status,ProductFamily FROM Assets WHERE Asset_Age_Calculator__c > 7 AND Acc_Region__c = 'JAPN' AND Status = 'Active' AND ProductFamily = 'PHACO EQUIPMENT'),  
                             (SELECT Id,Subject,WhatId,CreatedDate,Event_Type__c,Sales_Tools__c,region__c FROM Events WHERE Event_Type__c = 'Other' AND CreatedDate = Last_N_Days:7  AND Sales_Tools__c LIKE '%NBA%' AND region__c = 'JPAN')
                             FROM Account WHERE Id IN:setAccId AND Region__c = 'JAPN' AND Record_Type_Name__c = 'Customer Account' AND Status__c in ('Active', 'Opeあり', 'Opeあり 件数不明')])
        {
            accountMap.put(accRec.Id,accRec);  
        }
        
        List<Recommendation> recs = new List<Recommendation>();
        for(Id idInst : accountMap.Keyset()){
            if(accountMap.get(idInst).Assets.size() > 0 && accountMap.get(idInst).Events.size() > 0){
                for(Asset assetsRec : accountMap.get(idInst).Assets){
                    Recommendation rec = new Recommendation(Name = assetsRec.Id,Description = 'Product is expired from "'+ assetsRec.Asset_Age_Calculator__c +'" Year and Event created from NBA. Would you like to create an Opportunity?', ActionReference = 'Oppty_action',AcceptanceLabel = 'Create Opportunity',
                                                            Dummy_Id__c = assetsRec.Id);
                    //Recommendation rec1 = new Recommendation(Name = assetsRec.Id,Description = 'Product is expired from "'+ assetsRec.Asset_Age_Calculator__c +'" Year. Would you like to create an Opportunity?', ActionReference = 'Oppty_action',AcceptanceLabel = 'Create Opportunity',RejectionLabel= 'Reject 1 Year');
                    recs.add(rec);
                    // recs.add(rec1);
                }
            }
        }
        outputs.add(recs);
        return outputs;
    }
    /*
* @author: Urvashi
*
* @date:     
*
* @description: Recommendation generator request class for Accounts
*/
    global class RecommendationGenerateRequest
    {
        @InvocableVariable(label='Account ID')
        global String accId;
    }
    
}